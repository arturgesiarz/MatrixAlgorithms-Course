import numpy as np
import time
import matplotlib.pyplot as plt

flops = 0

def generate_random_matrix(n):
    return np.random.uniform(0.00000001, 1.0, (n, n))


def gauss_det(matrix):
    global flops
    
    n = len(matrix)

    if n == 1:
        return matrix[0][0]
    
    for i in range(n):
        if matrix[i][i] == 0:
            for k in range(i + 1, n):
                if matrix[k][i] != 0:
                    matrix[i], matrix[k] = matrix[k], matrix[i]
                    flops += n 
                    break
            else:
                return 0  
        
        for j in range(i + 1, n):
            ratio = matrix[j][i] / matrix[i][i]
            flops += 1
            
            for k in range(i, n):
                matrix[j][k] -= ratio * matrix[i][k]
                flops += 2 

    if n == 5:
        for line in matrix:
            print(line)
    

    det = 1
    for i in range(n):
        det *= matrix[i][i]
        flops += 1 
    
    return det

matrix_sizes = []
times = []
flopss = []
max_size = 150

for size in range(1, max_size + 1):
    matrix = generate_random_matrix(size).tolist()
    flops = 0
    

    start_time = time.time()
    det = gauss_det(matrix)
    end_time = time.time()
    
    elapsed_time = end_time - start_time
    matrix_sizes.append(size)
    times.append(elapsed_time)
    flopss.append(flops)
    
    
    if abs(det) < 1:
        assert round(det, 5) == round(np.linalg.det(matrix), 5)
    elif abs(det) < 10000:
        assert round(det, 2) == round(np.linalg.det(matrix), 2)
    elif abs(det) < 10000000000:
        assert round(det) == round(np.linalg.det(matrix))
    elif abs(det) < 100000000000000:
        assert round(det, -4) == round(np.linalg.det(matrix), -4)
    elif abs(det) < 100000000000000000000:
        assert round(det, -10) == round(np.linalg.det(matrix), -10)
   
       
        

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.plot(matrix_sizes, times, label='Czas działania (s)')
plt.xlabel('Rozmiar macierzy')
plt.ylabel('Czas działania (s)')
plt.title('Czas działania eliminacji Gaussa')



plt.subplot(1, 2, 2)
plt.plot(matrix_sizes, flopss, label='Liczba operacji')
plt.xlabel('Rozmiar macierzy')
plt.ylabel('Liczba operacji zmiennoprzecinkowych')
plt.title('Liczba operacji dla eliminacji Gaussa')



plt.tight_layout()
plt.show()




import numpy as np
import matplotlib.pyplot as plt
import time
from multiplication.strassen import strassen, split_matrix

def generate_random_matrix(n):
    return np.random.uniform(0.00000001, 1.0, (n, n))

def invert(A):
    n = A.shape[0]
    mid = n // 2
    
    if n == 1:
        A[0, 0] += 1e-17
        return np.array([[1 / A[0, 0]]]), 1
    
    A11, A12, A21, A22 = split_matrix(A)
    
    count = [0] * 16
    
    # A11_inv = inverse(A11)
    A11_inv, count[0] = invert(A11)
    
    # S22 = A22 - A21 @ A11_inv @ A12
    S22, count[1] = strassen(A21, A11_inv)
    S22, count[2] = strassen(S22, A12)
    S22, count[3] = A22 - S22, mid**2
    
    # S22_inv = inverse(S22)
    S22_inv, count[4] = invert(S22)
    
    # B11 = A11_inv + A11_inv @ A12 @ S22_inv @ A21 @ A11_inv
    B11, count[5] = strassen(A11_inv, A12)
    B11, count[6] = strassen(B11, S22_inv)
    B11, count[7] = strassen(B11, A21)
    B11, count[8] = strassen(B11, A11_inv)
    B11, count[9] = A11_inv + B11, mid
    
    # B12 = -A11_inv @ A12 @ S22_inv
    B12, count[10] = strassen(A11_inv, A12)
    B12, count[11] = strassen(B12, S22_inv)
    B12, count[12] = -1 * B12, mid**2

    # B21 = -S22_inv @ A21 @ A11_inv
    B21, count[13] = strassen(S22_inv, A21)
    B21, count[14] = strassen(B21, A11_inv)
    B21, count[15] = -1 * B21, mid**2

    # B22 = S22_inv
    B22 = S22_inv
    
    return np.vstack((np.hstack((B11, B12)), np.hstack((B21, B22)))), sum(count)

def invert_with_padding(A):
    n = A.shape[0]
    
    def pad_matrix(A):
            n = A.shape[0]
            m = 1 << (n - 1).bit_length()
            if n < m:
                A = np.pad(A, ((0, m - n), (0, m - n)), mode='constant')
            return A
    
    A = pad_matrix(A)
    A_inv, flops = invert(A)
    
    return A_inv[:n, :n], flops

def generate_plot():
    matrix_sizes = []
    times = []
    flopss = []
    max_size = 50

    for size in range(3, max_size):
        print(size)
        matrix = np.array(generate_random_matrix(size).tolist())
        
        start_time = time.time()
        A_inv, flops = invert_with_padding(matrix)
        
        end_time = time.time()
        
        elapsed_time = end_time - start_time
        matrix_sizes.append(size)
        times.append(elapsed_time)
        flopss.append(flops)
        print(A_inv @ matrix)
          
    plt.figure(figsize=(12, 6))

    plt.subplot(1, 2, 1)
    plt.plot(matrix_sizes, times, label='Czas działania (s)')
    plt.xlabel('Rozmiar macierzy')
    plt.ylabel('Czas działania (s)')
    plt.title('Czas działania odwracania macierzy')


    plt.subplot(1, 2, 2)
    plt.plot(matrix_sizes, flopss, label='Liczba operacji')
    plt.xlabel('Rozmiar macierzy')
    plt.ylabel('Liczba operacji zmiennoprzecinkowych')
    plt.title('Liczba operacji dla odwracania macierzy')

    plt.tight_layout()
    plt.show()


generate_plot()




import numpy as np
import matplotlib.pyplot as plt
import time
from inversion_recursive import invert
from multiplication.strassen import strassen, split_matrix

def generate_random_matrix(n):
    return np.random.uniform(0.00000001, 1.0, (n, n))
  
def LU(matrix):
  n = matrix.shape[0]
  
  def pad_matrix(A):
        n = A.shape[0]
        m = 1 << (n - 1).bit_length()
        if n < m:
            A = np.pad(A, ((0, m - n), (0, m - n)), mode='constant')
        return A
  
  def lu_factorization(A):
    n = A.shape[0]
    mid = n // 2
    
    if n == 1:
      return np.array([[1]]), A.copy(), 0
    
    flops = [0] * 10
    A11, A12, A21, A22 = split_matrix(A)
    
    L11, U11, flops[0] = lu_factorization(A11)
    U11_inv, flops[1] = invert(U11)
    L21, flops[2] = strassen(A21,U11_inv)
    L11_inv, flops[3] = invert(L11)
    U12, flops[4] = strassen(L11_inv, A12)
    
    # S = A22 - A21 @ U11_inv @ L11_inv @ A12
    S, flops[5] = strassen(A21, U11_inv)
    S, flops[6] = strassen(S, L11_inv)
    S, flops[7] = strassen(S, A12)
    S, flops[8] = A22 - S, mid**2
    
    L22, U22, flops[9] = lu_factorization(S)
    

    L = np.block([
        [L11, np.zeros((mid, n - mid))],
        [L21, L22]
    ])
    
    U = np.block([
        [U11, U12],
        [np.zeros((n - mid, mid)), U22]
    ])
    
    return L, U, sum(flops)
  matrix = pad_matrix(matrix)
  L, U, flops = lu_factorization(matrix)
  return L[:n, :n], U[:n, :n], flops


def generate_plot():
  matrix_sizes = []
  times = []
  flopss = []
  max_size = 30

  for size in range(1, max_size):
      matrix = np.array(generate_random_matrix(size).tolist())
      
      start_time = time.time()
      L, U, flops = LU(matrix)
      end_time = time.time()
      
      elapsed_time = end_time - start_time
      matrix_sizes.append(size)
      times.append(elapsed_time)
      flopss.append(flops)
      
      assert np.allclose(np.tril(L), L), "Macierz L nie jest dolnotrójkątna."
      assert np.allclose(np.triu(U), U), "Macierz U nie jest górnotrójkątna."
      assert np.allclose(L @ U, matrix, atol=1e-4), "Macierz L * U nie odtwarza poprawnie oryginalnej macierzy."
            
          
  plt.figure(figsize=(12, 6))

  plt.subplot(1, 2, 1)
  plt.plot(matrix_sizes, times, label='Czas działania (s)')
  plt.xlabel('Rozmiar macierzy')
  plt.ylabel('Czas działania (s)')
  plt.title('Czas działania LU faktoryzacji')


  plt.subplot(1, 2, 2)
  plt.plot(matrix_sizes, flopss, label='Liczba operacji')
  plt.xlabel('Rozmiar macierzy')
  plt.ylabel('Liczba operacji zmiennoprzecinkowych')
  plt.title('Liczba operacji dla LU faktoryzacji')

  plt.tight_layout()
  plt.show()
  
# generate_plot()




import numpy as np
import time
import matplotlib.pyplot as plt


flops = 0

def generate_random_matrix(n):
    return np.random.uniform(0.00000001, 1.0, (n, n))

def det_rec(matrix):
    global flops
    
    if len(matrix) == 1:
        return matrix[0][0]
    
    if len(matrix) == 2:
        flops += 3
        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
    
    det = 0
    for col in range(len(matrix)):
        submatrix = [row[:col] + row[col + 1:] for row in matrix[1:]]
        cofactor = (-1) ** col * matrix[0][col]
        
        flops += 1
        
        det += cofactor * det_rec(submatrix)
        
        flops += 1
    
    return det

matrix_sizes = []
times = []
flopss = []
max_size = 10

for size in range(1, max_size + 1):
    matrix = generate_random_matrix(size)
    flops = 0
    
    start_time = time.time()
    det = det_rec(matrix.tolist())
    print("rozmiar:", size, "det:", round(det, 5), "sprawdzenie:", round(np.linalg.det(matrix.tolist()), 5))
    end_time = time.time()
    
    elapsed_time = end_time - start_time
    matrix_sizes.append(size)
    times.append(elapsed_time)
    flopss.append(flops)
        
       
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.plot(matrix_sizes, times, label='Czas działania (s)')
plt.xlabel('Rozmiar macierzy')
plt.ylabel('Czas działania (s)')
plt.title('Czas działania rekurencyjnego liczenia wyznacznika')



plt.subplot(1, 2, 2)
plt.plot(matrix_sizes, flopss, label='Liczba operacji')
plt.xlabel('Rozmiar macierzy')
plt.ylabel('Liczba operacji zmiennoprzecinkowych')
plt.title('Liczba operacji dla rekurencyjnego liczenia wyznacznika')

plt.tight_layout()
plt.show()
